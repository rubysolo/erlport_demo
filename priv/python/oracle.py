from erlport.erlterms import Atom
import base64
import os
import io
from PIL import Image
from model import hydrate, predict, normalizer

path = os.path.dirname(os.path.realpath(__file__))
os.chdir(path)

network = hydrate('./results/model.pth')

def guess(encoded_image, verbose=False):
    # convert base64 to image tensor
    image = io.BytesIO(base64.decodebytes(encoded_image))
    image = Image.open(image).convert('L')
    if verbose:
        print(image.format, image.size, image.mode)

    image_array = normalizer(image)
    image_array = image_array.reshape((1, 1, 28, 28))

    digit = predict(network, image_array)

    if verbose:
        print(digit)

    return (Atom(b'ok'), digit)

if __name__ == "__main__":
    digits = [
        b"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAACnklEQVRIS+1VP0iqcRQ9gVYIYaBQFC2BBrkURqlQRrSFEGhEf5ZorCUhBBEMGgQXESwSRIpEIlEkpClwqNAhigaHUGwtrSFcFPzzuL/Ha3hPP3+GxBu608fHvfd899zvnNsBoIZvjI4fwHaz/f9SOjMzg8XFRYyPj2N2dvZz8Gq1ivn5ecTjcS4ymk6o0Wjg8/mgUqkEG56fn2N1dRWVSkUwTxBQr9fj6uoKIpEI7+/vODw8xO3tLUqlEms6MjKCo6MjFItFdHd3IxKJwGg0fg2wq6sL6XQaQ0NDcLvdsNvt+Pj4qNtMq9UiFAphcHAQfr8fm5ubDUEbTri0tASi6fHxEWNjY033Q7u9vr6GRCLB5OQk7u7u6tY0BKQv3djYgMVigdPpbApICTabDfv7+7i/v4darW4N8OHhgU02PT2Nm5sbLsDOzk48Pz9jYGAACwsLuLy8/Keu4YT5fB5yuRx9fX3I5XJcgJS0t7fH9n1wcIDt7W1+wFrtt6eLxWKUy2VuQIPBgIuLC8RiMdDz39F0wv7+fry+vnIDrqysIBgMIhwOw2Qy8QM+PT1BqVSyPdKfyhsejwdbW1twOBywWq38gGdnZ1heXobZbIbL5eLCI4N4eXmBTCbD3NxcXbtrSOn6+jpOT0+RTCZBwuaJtbU1BAIBZDIZKBSK1mRBVvX29saETJoimQiFVCpl+hseHmb6PT4+bg2Qsknwu7u7TBZ0LWiv9aK3t5cZPPloIpGATqdr3dqogoRMdkVWRT56cnKCaDSKQqHArGt0dJTteWdnBz09Pew90Z9Kpb4GSFVEqdfrBe1UKMhh6C5ms1nBvKb38E81yYM0NjExwU7R1NQUszESOAm9bQeY5+9sJYd7wlaaCuX+ALaLyc8+vwAk1QYQgsXpKQAAAABJRU5ErkJggg==",
        b"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAABPElEQVRIS+2WMYqDYBSER6ztJBByCQvBXkFI6wFUsPIAdqYR0oi1WIXkBB5A7QUR8RKiiI0HMMvvsrCw1XPXwEIGhFf8P58zTwY5AE+8UNwb+Ndp/49IbdtGFEU4n8+oqooUwiaHeZ5D0zQYhoE0TfcHzvMMQRBwPB7R9/2+wMPhgGEYME0TRFEkwdhhcqSKoqAsS9R1DVmW9weaponH47Huju2QKrJD13URxzGSJAGbqSIDL5cLgiDA9XqF7/tUHn2HYRjC87wVxqBUkR3e73dYlgXHcXC73ag8usOiKKCqKnRdR5Zl+wObpoEkSevTtu3+wK7r1oY5nU5gM1XkHY7juDYMaxw2U0UGPp+ffyQ8z2NZFiqP/tF8ATmOvStdmx2+DMhahsFY42wR2eEWyPc7b+BvE/xx/+WRfgCnlH8BafBhiAAAAABJRU5ErkJggg==",
        b"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAB00lEQVRIS+2VvctBYRjGL4NEYqQog2S1+NqYlELJICYim9VkNyqLRFl8pVgkyYKBkoEiCQvJyj/g7TnDW3TkORwmz3jOfa7fc1/3xxEAuOKLR/AD8u32z9IbR2UyGTweD2w2G4xGIzQaDcizfr8Pu92O6/V5w1Nb6na7Ua1WIRaLWcsajUaRz+eflpwKqFarsdlsIBKJsFgskE6nMZ/PMZlMEIlEkMvlUKvV4Pf7+QGWSiUEAgGUy2UEg8EbUYfDgU6ng/F4DKvVyg/wcrlAKBRCp9PhcDjciCYSCaRSKRSLRYRCIX6ATqeTEWq32zeCEokE2+0WSqUSLpcLrVaLH+AjlXA4jEKhgNlsBoPB8BRGAqiahk1Jq9ViOp1CLpcz9a1UKp8Dktnrdrswm81oNpvwer1UsJczJNmQEViv1zCZTDifz58D+nw+1Ot1kM4lY7BcLqlhnDOUSqXMAlAoFIjH48hkMpxgnIGxWAzZbBaDwYDZpzS78/5GnLp0tVpBr9czmTUajYfZkbjT6cT6nhposVgwGo2oLDwej1CpVO8Byd+ALGlydrsd9vv9Q/hwOEQymXwPSHYpqSGxq9frUWXKFkRt6cuEuw9/QL6c/Nf5uqV/Jje1Ac4dieYAAAAASUVORK5CYII=",
        b"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAACmElEQVRIS+2VPUhyURjH/34MEmVi+EFSRIOF0BAKCgoSujRUWxJIQ+KiDUKDUy26taiDiya4uQkG0WCZUGQFZSBYTUHix9QgRUniyzkvxvuWt3v19W3qgTPce8/9/87zP+c8Dw9AC98YvB9gv93u2VKRSISVlRVoNBo4HA4MDQ1hY2MDoVDoyzVyAsrlclgsFmi1WjomJibo+BhbW1vw+Xy9A3k8HjKZDMxm8yeR19dXXFxcwGQy0W/n5+cwGo14e3v7N2A+n8fIyAhubm5wcnKCXC6Hs7MzKBQKpNNpjI6O4v7+HgaDAbVajXXLOVn6UcVmsyEajWJwcBCXl5dYWFhAuVxmhZEJXQN3dnawtrb2Lr69vY2HhwdcXV3h+PiYFdoVkM/no9ls/iVK9kwoFNJ3u7u7WF5exsvLCyO4KyBRWV1dhcvlwv7+Pp6enqiwSqWC0+nEwMAATk9PYbVa8fz83BHaNZBp6TKZjFqqVqsRDofhdrv/L5CoT09Po1gsUtuHh4ffHfiT3LcM26Lk+kxNTWFmZgaFQuFTln0HVioVKJVKjI2NoVQqcQMmk0nodDpaJ+v1OutRb0+Ym5vD4eEhzYxk2Ck6Zthq/e7JTLYwrSCRSIAUBY/Hg2AwyB24t7eH+fl5NBoNrK+vIxKJsGap1+vpKSV3lZQ7pjLXMUOJRIJ4PI7FxUUKOjo6QiAQQCqVQjv79goEAgE2Nzfh9XpBWpbf76fPTPHloVlaWkIsFoNUKqX/397e4u7ujtbP8fFxTE5OYnZ2FmKxmH4nThBHiDM9AclP5ELb7XbaXElF6RQHBwe0D2azWVbrOV8L0tFJ8yX7Q6rJ4+Mjrq+vaduqVqusoPYEzkDOiiwTf4D9cvJd59st/QVoC/cBCX+tQAAAAABJRU5ErkJggg==",
        b"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAABw0lEQVRIS+3UvctBURwH8O+VDEwW5aUsBsQmkSRZDLZbyD+gKAPJImWwGJSiZDNQSjaiLBT/gZeSSYwMMpDydM9g0NN1vZxneHLWczuf+/v2PYcBcMUfLuYLfjrtlyK1WCzo9XpIJBKo1WpP/dPToFgsJpjH40E+n0cqlaIHSiQSNBoNsCyL0+mE1WoFk8mE61V40Z+asFKpIBwO43A4QCaTQSQSQa1WY7vdCp5SMJjJZJDNZnE+n+FyudBut6FUKumANpsN4/GYTBEIBNBqtchUVECpVIrZbAatVotCoUCayS1qYLFYRCwWw2KxgNlsxuVyIeBms4FKpfpspFyUk8mEAG63G8Ph8FaO5XIJnU4Hu90OvV4Pq9WKZDKJ4/HIWyDe0ux2O8jlcsEN9Pl86HQ6r4ODwYBccL7F3UGGYdDtduH3+9+bkA+KRqMolUpoNpsIBoOCUxB8D+9PNBgMpL37/R4KheJWpkfyyyB38Hq9hkajgdFoxHw+f2SR/bfA0WgEp9MJr9eLfr9PH6zX6wiFQuR9rVar9MFyuYxIJIJ0Oo1cLkcfdDgciMfj4B726XRKHxQk3H30Vmm+4G8J/P9IfwAxQ74B1CaKzwAAAABJRU5ErkJggg==",
        b"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAB4klEQVRIS+2Vv6tBYRjHv4cFJQuFRAYpKRMLMhuVKKPVYOIP8CcYrCYhpaSwWpTIIBYpP6L8Gs3cnre4ty7n5cTtdrvPck69z/v9vM/3PO9zBABn/GAI/8BXu/07LbVarej3+6jVapjP55DJZKxwrVYLm80Go9EIg8EAt9uN2Wwmagq3wkajgWAwyHV2vV7D5/OxA4kFF9hut+H3+yEIAgje6/WuesfjkVVOz8Vigf1+zz0YFxgOh1GpVNDpdOD1ermCvAQusFAoIBaLIZFIIJfL8fS466JAao7NZgOdTge73Y7JZMIV5CWIAqPRKEqlEtOIx+OwWCxXveFwiGq1ytP/ti4K3O12rLp7kUwmkc1mn4KKAs/nz7nearXQ7XaZuEqlQiqVwmq1gtlsxtc8Hl0UmMlkIJfLWRXb7faqRVdkuVzCZDLB5XKB7H00uF16T4i+XygUYh1cLBYf5UEysFwuIxKJsGbK5/PvBSoUCjYz9Xo9nE4nxuPx+4AajYYNALKSxpzH43kYRok3LaWmoBmqVqtRr9dxOp3YLCXxQCAApVLJ5ie9DwaD1wDpCtDv5laMRiOk02k0m82nYHcrvKhQUzgcjqvo4XAA3cfpdPo06LJBcpdKJf4DpTp3d9/ft/QDj4u7ASUFfdgAAAAASUVORK5CYII=",
        b"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAACeUlEQVRIS+2VP0iqYRTGHwORCEsHyRaHhgwFHcQgh0hwqBaRVofUQRRUBBGyRIUQJDCcWhr6AxFOLkLOVoKKCC4R6qCgiyAiFgbZ5X0vRveW+an3NvWMH+/7/L5zznvOYQF4xTeK9QP8LNtbW1uw2WxQKpXY3NxEJpNhXJSRUkoAkUgEq6urFNBsNqHRaJDL5f49cHt7G9FoFFNTU6hWqzg6OsLJyQna7TZjGDnIKEK3241QKISXlxccHx/D4/GMDOr/1VAgqVE8HgeLxYLBYMDp6elIEf19+EugQCBAoVDA/Pw8gsEg9vb2JoINTenh4SFcLheSySTW1tYmhn0J5PF4qFQq4HK5UKlUSKVS/xeo1+txcXFBIWq1Go+Pj0in0xNDB9Ywm81CoVD8ASiXy7i6usLZ2RkeHh7Ggg8Evr7+nun1ep2aczgcrKys0D4kIs3ucDhwc3MzEngokLRDXwsLC7BYLLDb7Zibm6Of7+7uoNVq0Wg0GIEHAp+fn8FmszEzM0Pr915CoRBGoxH7+/uYnp5GIpHAxsbGZMB8Pg+5XI6dnR1as88kEolAak36lQyI6+vrodCBEZpMJjora7UaFhcX0e12PzULh8NwOp3w+/0IBALjA0nt7u/vsbS0hPPzc1itVnQ6nQ+GZALt7u7C6/Xi4OBgfCC5KZVK6aOYnZ1FsViEz+fD5eXlmympMUm9RCKBTqdDLBabDEhui8ViarS8vEzNnp6e6MIlbcPn8yGTyVAqlSiUPLRhGrotiAFpAbIpzGbzG7hv3Gq1sL6+TiNlIkbA90akF0nURL1eD7e3t3RPMtXIQKbGg879ACfN4If7357SX4QC9AG6vZGxAAAAAElFTkSuQmCC",
        b"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAACBUlEQVRIS+2WzatpURjGHx/lowwUyUD5KB9lpCiSMjDBiIkkylBKZGZq6GtmYGAgQ0OZKpmYUJIoQgopf4CU29q3c7rdnLv3Xuee2+1239q1d3u967eeZ6/3XVsA4Ik/GIL/wN/t9t9pqdvthlQqhdPphFwuZy5yLxAIIJPJ4HK53o3Q6XQ4Ho8fGvNSocFgQDabRTgchtls5uWqyWTCdrvlDhQKhTifz1Cr1e9Jt9sN8/kcq9UKp9MJ9/sdk8kEj8cDBNBqtZixoVAIg8Hglwt8qbBarUKj0aBSqWA2m304AbF5Op3CarWC5BSLRVY3PrVpSqUSyuUyFosFHA4Ho5wtqIHE8t1uB4lEAr/fj9FoxMZi3lMDa7Ua8vk8Op0OkskkJxg1UKvVYrPZMKViNBoZpVyDs8JgMAibzQaFQoFAIACPx4PL5cI8i0QiRKNR9Pt9Vi5n4PV6hUqlejkhKZtEIsFaErwsJQpJR7FYLIjFYjgcDkilUozK5XLJquxtAGeFbwm9Xg+RSASFQgH1ep0ziApIvhWxVqlUQq/XY7/ffy2QbJTxeIz1es1YSxO8LM3lcmg0Gmi320in0zQ8foXf7XYRj8eRyWTQbDa/HkhODLvdDp/Px7mV/bwqXpY+n99/8EinIUcYTfACDodDiMVieL1eGtbnmjctkZdCWsiPef8+8BsydLUBsHUVxwAAAABJRU5ErkJggg==",
        b"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAACv0lEQVRIS+2VS0tqcRTFl9RAMrCZYWgEWtQHKJyIQkiDoCJooJTVIIgeFhJIgSmBTlIofBBEGCnRrGzQBwjtQRBUUIHaoCBo0qCkIMLL3mDk9eI5ktxRe3Q4j/U7+7X+EgA5/MeQ/ALz1VapVHA4HOjv74dCocDV1RXC4TBCoVBZDRFV0tHRUfh8PtTV1RWJ39zcYGxsDIeHh6LAgsDp6WmsrKyw2P7+Pmw2G+7u7tDb2wu/34+mpiZ+Zjabsb29LQgtCWxvb0cikUBVVRX6+vqwt7dXIFhTU4NsNsv3JicnEQwGfwaMRCKwWq3cp4mJiSIxnU6HZDKJx8dHNDQ0IJcT3rCSGZJQfX09NBoN0ul0EXBjYwMjIyPwer2Yn58XzI5eKAl8fX2FTCZDW1sbrq+vCwSVSiVSqRSkUikaGxtxf3//c2AsFuNheHt7w+zsLNbX1/H5+cnCgUCAyxyPx9HT0yMKJpgh/f3BwQEMBgML3t7eYmFhAaenp1xiiUQCGqzz8/PKAPMqtAqUjVarLRDe3NzE8PCwaJhght+VqJe0k0tLS7wmFFtbW/wjLy8voqGCi/+30urqKqampr5uZzIZDA4O8nqIibKAarWaPbS2tpZ9lSyvpaUFNM2dnZ04OTkRZJYF3NnZwcDAAJdyaGiIweQudE2D09HRgY+Pj5JQ0UDaNSrf+/s7++fT0xMLV1dX4+LiAq2trZibm8Py8nJlgHa7ncXI7shdvsf4+Djb3+7uLntuqRCdocvlwuLiItxuN+g6HzSxBOru7obH4+E9rQgwnyEdVTMzM6xJhk3u09XVxW7U3NyMh4eHygBpII6Pj1l4bW2N+0gOJJfL8fz8DJPJhLOzs8pOaTQahcViKRAlv3U6nTxQYkJ0D/NiRqMRer0el5eXODo64rOwnCgbWI74v979Bf60gkXf/wFUaBsQtQjMqgAAAABJRU5ErkJggg==",
        b"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAACkUlEQVRIS+VWP0jqURT+BF3EQUGS1EHB6A8IgmDgIuggJEhFS401REtCQ5JDgoIKLtqg0hC0GiGBNQS2liC1aUWDoIjhkEa4GPg4d/g9zJ6/P/De8PrWe8/57jnnO+dcGYAh/iFkP5fQZDLh4OAAGxsbUKlUY0mv1WooFArIZrNoNpuCi/JtSqPRKPb29qBUKnkddTod7Ozs4Pz8nPcuXRgjpKhisRg+Pz9xeXnJoqRovsLj8bBHLS0tod/vY3Z2VlCkI4Rzc3OoVqsYDofY3NzE6ekp76vPzs6wtraGo6MjBAIB3vsjhHd3d1hcXEQymcT+/v5EY6vVinA4jHw+j3g8jlwux+z4wBH6fD4Ui0U0Gg0sLCzg4+Njou3r6yumpqbQ6/WgVqv5eLhzjpCKvrq6ilAoxF48CUajkT2M8PT0BCqFUHCEpDatVouZmRm8vLz80d7v9+Pi4oI7N5vNqNfrQvl+q5SEQtBoNOh2u2MOVlZWcHh4CJvNxp09Pj5ifn5eMNlIW5RKJbjdbtzc3DABUMRyuRxerxfLy8uwWCzMcavVgkwmw/T0NCKRCBOOGHApJaFcX1/DYDB8a08PSKVSSKfTeH5+hl6vh91ux/39vRi+0cbX6XRYX1+Hy+ViqSWlXl1dsd4kx+/v73A4HCiXy6zOVG+xEL0tgsEgEokETk5OsLW1JZZvfLTxeXh4eGDCodpSCcRCVISU8na7jbe3N9b0NG/FQhQhqZVWEkVGEUqBKMJMJsNWEfUjrTApEEVIjU5ryOl04vb2VgqfcNHQ2KOBTXWjH8BgMPi7hLu7u6zpaRLR8pUKwSmlXwBt/+3tbRwfH0vlE55ShULB+q9SqbAfgVQIjlAqwVe7/5/wF5aTDxDAMMwfAAAAAElFTkSuQmCC"
    ]

    for (index, img) in enumerate(digits):
        print(f"passing image {index}...")
        guess(img)
